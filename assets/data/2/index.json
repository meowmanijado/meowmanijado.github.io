{"hash":"8db8457d91462f5d81609a766a0453648db1f490","data":{"posts":{"totalCount":11,"pageInfo":{"totalPages":2,"currentPage":2},"edges":[{"node":{"id":"62e386980b05143e7fac95fa2d49f0de","title":"🔥 TIL: Versioning / Cache Busting","timeToRead":1,"datetime":"2020-02-10 00:00:00","content":"<p>Normally when I want to see the the changes on my compiled assests, I usually add console.log on JS and change the color of the background on CSS.</p>\n<p>Gladly, I found out that there is method versionon Laravel Mix where it will automatocally append a unique hash to the filenames of all compiled files.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">mix.js('resources/js/app.js', 'public/js')</span>\n<span style=\"color: #24292EFF\">    .version();</span></code></pre>\n<p>Make sure to use the Laravel's gloabal mix function within your views to load the appropriately hashed asset. The mix function will automatically determine the current name of the hashed file:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">&lt;</span><span style=\"color: #22863A\">script</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\">src</span><span style=\"color: #24292EFF\">=</span><span style=\"color: #22863A\">\"{{ mix('/js/app.js') }}\"</span><span style=\"color: #24292EFF\">&gt;&lt;/</span><span style=\"color: #22863A\">script</span><span style=\"color: #24292EFF\">&gt;</span></code></pre>\n<p>See more reference to <a href=\"https://laravel.com/docs/6.x/mix#versioning-and-cache-busting\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://laravel.com/docs/6.x/mix#versioning-and-cache-busting</a></p>\n","excerpt":"","description":"","path":"/til-versioning-cache-busting/","cover":"","tags":[{"id":"Today I Learned","title":"Today I Learned","path":"/tag/Today%20I%20Learned/"}],"author":null}},{"node":{"id":"c91b9e72acfda96f8084f4f65ac310de","title":"🔥 TIL: Networking Basics","timeToRead":1,"datetime":"2020-02-10 00:00:00","content":"<p>I had a conversation with a friend about their architectural structure on his work, and he mentioned the word <strong>websocket</strong>. I believe I have encoutered this word many times and I used it on one of my projects but still I don't have the full grasp idea of what is it doing.</p>\n<p>Reference to <a href=\"https://dev.to/iwilsonq/build-real-time-apps-by-learning-websockets-3c9m\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://dev.to/iwilsonq/build-real-time-apps-by-learning-websockets-3c9m</a></p>\n<p><strong>Socket</strong> - A <strong>TCP (Transmission Control Protocol) Socket</strong> is and endpint instance defined by the combination of IP address with a port, in the context of either a listening state (a server) or a particular TCP Connection (a client, like your browser).</p>\n<p><strong>TCP Connection</strong> - pairing of two sockets.</p>\n<p><strong>3 main kinds of transports commonly use in browser web apps</strong></p>\n<ul>\n<li><strong>XMLHTTPRequests</strong>, or just HTTP for short. Send a single request and get a single response. These are pretty common</li>\n<li><strong>Server-Sent Events</strong>, or SSE. Send a long-lived request and be able to stream data from the server. Great for real-time data streaming, particularly when the client doesn't need to send messages back to the server.</li>\n<li><strong>WebSockets</strong>, the only transport that allows for bidirectional streaming of text and binary data. We'll dive a little further into it.</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ApzTu2NN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/47j90glrwxk8dv2perdp.png\"></p>\n<p>In most tutorials that deal with external data, you'll deal with the left-most paradigm's HTTP requests. Actually, all of these flows are initiated with an HTTP request, as shown by the blue arrows.</p>\n<p>I don't commonly see articles or tutorials on SSE, but MDN has a good reference in case a one-way data stream sounds intriguing.</p>\n<p>The third flow is most interesting to us - it gives us the ability to communicate with the server over a single long-lived connection.</p>\n<p><strong>Use Cases for websockets</strong></p>\n<ol>\n<li>Social feeds</li>\n<li>Multiplayer Games</li>\n<li>Collaborative Editing/Coding</li>\n<li>Multimedia Chat</li>\n</ol>\n","excerpt":"","description":"","path":"/til-networking-basics/","cover":"","tags":[{"id":"Today I Learned","title":"Today I Learned","path":"/tag/Today%20I%20Learned/"},{"id":"Networking","title":"Networking","path":"/tag/Networking/"},{"id":"Websockets","title":"Websockets","path":"/tag/Websockets/"}],"author":null}},{"node":{"id":"fd2a6a32451e688cf1fcff21755b250f","title":"Different ways to declare Function in JS","timeToRead":1,"datetime":"2020-01-25 00:00:00","content":"<p>This is a collection of learnings from Wes Bos course. 👌</p>\n<p><strong>Regular Function</strong></p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #D32F2F\">function</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\">doctorize</span><span style=\"color: #24292EFF\">(firstname) {</span>\n<span style=\"color: #24292EFF\">  </span><span style=\"color: #D32F2F\">return</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #22863A\">`Dr. </span><span style=\"color: #D32F2F\">${</span><span style=\"color: #24292EFF\">firstname</span><span style=\"color: #D32F2F\">}</span><span style=\"color: #22863A\">`</span>\n<span style=\"color: #24292EFF\">}</span></code></pre>\n<p><strong>Anon or Anonymous Function</strong></p>\n<p>Function without a name.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #D32F2F\">function</span><span style=\"color: #24292EFF\"> (firstname) {</span>\n<span style=\"color: #24292EFF\">  </span><span style=\"color: #D32F2F\">return</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #22863A\">`Dr. </span><span style=\"color: #D32F2F\">${</span><span style=\"color: #24292EFF\">firstname</span><span style=\"color: #D32F2F\">}</span><span style=\"color: #22863A\">`</span>\n<span style=\"color: #24292EFF\">}</span></code></pre>\n<p><strong>Function Expression</strong></p>\n<p>Function in a variable name.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #D32F2F\">const</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\">doctorize</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">function</span><span style=\"color: #24292EFF\"> (firstname) {</span>\n<span style=\"color: #24292EFF\">  </span><span style=\"color: #D32F2F\">return</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #22863A\">`Dr. </span><span style=\"color: #D32F2F\">${</span><span style=\"color: #24292EFF\">firstname</span><span style=\"color: #D32F2F\">}</span><span style=\"color: #22863A\">`</span>\n<span style=\"color: #24292EFF\">}</span></code></pre>\n<p><strong>Hoisting</strong></p>\n<p>Any function declaration can run before it’s define.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #6A737D\">// Working</span>\n<span style=\"color: #6F42C1\">doctorize</span><span style=\"color: #24292EFF\">(‘wes’);</span>\n<span style=\"color: #D32F2F\">function</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\">doctorize</span><span style=\"color: #24292EFF\">(firstname) {</span>\n<span style=\"color: #24292EFF\">  </span><span style=\"color: #D32F2F\">return</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #22863A\">`Dr. </span><span style=\"color: #D32F2F\">${</span><span style=\"color: #24292EFF\">firstname</span><span style=\"color: #D32F2F\">}</span><span style=\"color: #22863A\">`</span>\n<span style=\"color: #24292EFF\">}</span>\n\n<span style=\"color: #6A737D\">//Not Working</span>\n<span style=\"color: #6F42C1\">doctorize</span><span style=\"color: #24292EFF\">(‘wes’);</span>\n<span style=\"color: #D32F2F\">const</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\">doctorize</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">function</span><span style=\"color: #24292EFF\"> (firstname) {</span>\n<span style=\"color: #24292EFF\">  </span><span style=\"color: #D32F2F\">return</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #22863A\">`Dr. </span><span style=\"color: #D32F2F\">${</span><span style=\"color: #24292EFF\">firstname</span><span style=\"color: #D32F2F\">}</span><span style=\"color: #22863A\">`</span>\n<span style=\"color: #24292EFF\">}</span></code></pre>\n<p><strong>Arrow Function</strong></p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #6A737D\">// Regular Declaration</span>\n<span style=\"color: #D32F2F\">function</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\">inchToCM</span><span style=\"color: #24292EFF\">(inches) {</span>\n<span style=\"color: #24292EFF\">  </span><span style=\"color: #D32F2F\">const</span><span style=\"color: #24292EFF\"> cm </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> inches </span><span style=\"color: #D32F2F\">*</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">2.54</span><span style=\"color: #24292EFF\">;</span>\n<span style=\"color: #24292EFF\">  </span><span style=\"color: #D32F2F\">return</span><span style=\"color: #24292EFF\"> cm;</span>\n<span style=\"color: #24292EFF\">}</span>\n<span style=\"color: #6A737D\">// Arrow Function Declaration</span>\n<span style=\"color: #D32F2F\">const</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\">inchToCM</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> (inches) </span><span style=\"color: #D32F2F\">=&gt;</span><span style=\"color: #24292EFF\"> {</span>\n<span style=\"color: #24292EFF\">  </span><span style=\"color: #6A737D\">// Explicit return </span>\n<span style=\"color: #24292EFF\">  </span><span style=\"color: #D32F2F\">return</span><span style=\"color: #24292EFF\"> inches </span><span style=\"color: #D32F2F\">*</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">2.54</span><span style=\"color: #24292EFF\">;</span>\n<span style=\"color: #24292EFF\">}</span>\n<span style=\"color: #24292EFF\">​</span>\n<span style=\"color: #6A737D\">// Implicit return, possible to remove the parenthesi if only one parameter</span>\n<span style=\"color: #D32F2F\">const</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\">inchToCM</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> inches </span><span style=\"color: #D32F2F\">=&gt;</span><span style=\"color: #24292EFF\"> inches </span><span style=\"color: #D32F2F\">*</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">2.54</span><span style=\"color: #24292EFF\">;</span>\n<span style=\"color: #24292EFF\">​</span>\n<span style=\"color: #6A737D\">// Implicit return, if more than one parameter</span>\n<span style=\"color: #D32F2F\">const</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\">add</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> (a, b </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">3</span><span style=\"color: #24292EFF\">) </span><span style=\"color: #D32F2F\">=&gt;</span><span style=\"color: #24292EFF\"> a </span><span style=\"color: #D32F2F\">+</span><span style=\"color: #24292EFF\"> b;</span></code></pre>\n<p><strong>Return an object</strong></p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #D32F2F\">function</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\">makeABaby</span><span style=\"color: #24292EFF\">(first, last) {</span>\n<span style=\"color: #24292EFF\">  </span><span style=\"color: #D32F2F\">const</span><span style=\"color: #24292EFF\"> baby </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> {</span>\n<span style=\"color: #24292EFF\">    name</span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #22863A\">`</span><span style=\"color: #D32F2F\">${</span><span style=\"color: #24292EFF\">first</span><span style=\"color: #D32F2F\">}</span><span style=\"color: #22863A\"> </span><span style=\"color: #D32F2F\">${</span><span style=\"color: #24292EFF\">last</span><span style=\"color: #D32F2F\">}</span><span style=\"color: #22863A\">`</span><span style=\"color: #24292EFF\">,</span>\n<span style=\"color: #24292EFF\">    age</span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">0</span>\n<span style=\"color: #24292EFF\">  }</span>\n<span style=\"color: #24292EFF\">  </span><span style=\"color: #D32F2F\">return</span><span style=\"color: #24292EFF\"> baby;</span>\n<span style=\"color: #24292EFF\">}</span>\n<span style=\"color: #24292EFF\">​</span>\n<span style=\"color: #D32F2F\">const</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\">makeABaby</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> (first, last) </span><span style=\"color: #D32F2F\">=&gt;</span><span style=\"color: #24292EFF\">  ({  name</span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #22863A\">`</span><span style=\"color: #D32F2F\">${</span><span style=\"color: #24292EFF\">first</span><span style=\"color: #D32F2F\">}</span><span style=\"color: #22863A\"> </span><span style=\"color: #D32F2F\">${</span><span style=\"color: #24292EFF\">last</span><span style=\"color: #D32F2F\">}</span><span style=\"color: #22863A\">`</span><span style=\"color: #24292EFF\">,  age</span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">0</span><span style=\"color: #24292EFF\">  })</span></code></pre>\n<p><strong>IIFE - Immediately Invoked Function Expression</strong></p>\n<p>In JS parenthesis runs first by putting parenthesis in the end.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">(</span><span style=\"color: #D32F2F\">function</span><span style=\"color: #24292EFF\">() {</span>\n<span style=\"color: #24292EFF\">  </span><span style=\"color: #1976D2\">console</span><span style=\"color: #24292EFF\">.</span><span style=\"color: #1976D2\">log</span><span style=\"color: #24292EFF\">(‘Running the Anon </span><span style=\"color: #1976D2\">Function</span><span style=\"color: #24292EFF\">’)</span>\n<span style=\"color: #24292EFF\">  </span><span style=\"color: #D32F2F\">return</span><span style=\"color: #24292EFF\"> ‘You are cool’;</span>\n<span style=\"color: #24292EFF\">})();</span>\n<span style=\"color: #6A737D\">// If there are any parameters</span>\n<span style=\"color: #24292EFF\">(</span><span style=\"color: #D32F2F\">function</span><span style=\"color: #24292EFF\">(age) {</span>\n<span style=\"color: #24292EFF\">  </span><span style=\"color: #D32F2F\">return</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #22863A\">`You are cool </span><span style=\"color: #D32F2F\">${</span><span style=\"color: #24292EFF\">age</span><span style=\"color: #D32F2F\">}</span><span style=\"color: #22863A\">`</span><span style=\"color: #24292EFF\">;</span>\n<span style=\"color: #24292EFF\">})(</span><span style=\"color: #1976D2\">10</span><span style=\"color: #24292EFF\">);</span></code></pre>\n<p><strong>Methods!!! is simply a function that lives inside of an object</strong></p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #D32F2F\">const</span><span style=\"color: #24292EFF\"> wes </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> {</span>\n<span style=\"color: #24292EFF\">  name</span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> ‘wes’,</span>\n<span style=\"color: #24292EFF\">  </span><span style=\"color: #6F42C1\">sayHi</span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">function</span><span style=\"color: #24292EFF\">() {</span>\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #D32F2F\">return</span><span style=\"color: #24292EFF\"> ‘Hey Wes’</span>\n<span style=\"color: #24292EFF\">  },</span>\n<span style=\"color: #24292EFF\">  </span><span style=\"color: #6A737D\">//shorthand</span>\n<span style=\"color: #24292EFF\">  </span><span style=\"color: #6F42C1\">yellHi</span><span style=\"color: #24292EFF\">() {</span>\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #1976D2\">console</span><span style=\"color: #24292EFF\">.</span><span style=\"color: #1976D2\">log</span><span style=\"color: #24292EFF\">(‘HEY WESSS’)</span>\n<span style=\"color: #24292EFF\">  },</span>\n<span style=\"color: #24292EFF\">  </span><span style=\"color: #6A737D\">// Arrow function</span>\n<span style=\"color: #24292EFF\">  </span><span style=\"color: #6F42C1\">wisperHi</span><span style=\"color: #D32F2F\">:</span><span style=\"color: #24292EFF\"> () </span><span style=\"color: #D32F2F\">=&gt;</span><span style=\"color: #24292EFF\"> {</span>\n<span style=\"color: #24292EFF\">    consoles.</span><span style=\"color: #6F42C1\">log</span><span style=\"color: #24292EFF\">(‘hi wess </span><span style=\"color: #D32F2F\">in</span><span style=\"color: #24292EFF\"> a mouse’);</span>\n<span style=\"color: #24292EFF\">  }</span>\n<span style=\"color: #24292EFF\">}</span></code></pre>\n<p><strong>Callback Functions</strong></p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #6A737D\">//Click callback</span>\n<span style=\"color: #24292EFF\">&lt;</span><span style=\"color: #22863A\">button</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\">class</span><span style=\"color: #24292EFF\">=“clickme”&gt;Click me&lt;/button&gt;</span>\n<span style=\"color: #24292EFF\">​</span>\n<span style=\"color: #6F42C1\">const</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\">button</span><span style=\"color: #24292EFF\"> = document.querySelector(‘.clickme’)</span>\n<span style=\"color: #24292EFF\">​</span>\n<span style=\"color: #24292EFF\">button.addEventListener(‘click’, wes.yellHi);</span></code></pre>\n<hr>\n","excerpt":"","description":"","path":"/different-ways-to-declare-function-in-js/","cover":"","tags":[{"id":"Today I Learned","title":"Today I Learned","path":"/tag/Today%20I%20Learned/"},{"id":"JS","title":"JS","path":"/tag/JS/"}],"author":{"id":"meow","title":"meow","path":"/author/meow/"}}},{"node":{"id":"c88df58eeed7f9484438d9faf5dcaf54","title":"TIBS","timeToRead":2,"datetime":"2019-06-20 00:00:00","content":"<p>TIBS is a Barangay System tool to manage residents identity and secure information.</p>\n<p><strong>The system is quite basic:</strong></p>\n<ul>\n<li>Save the resident information</li>\n<li>Print ID of the resident</li>\n</ul>\n<p>That's it!</p>\n<p>What I want to cover in this blog is what I unexpected to learn, <strong>communication</strong>.</p>\n<p>Most of the developers, working in a company with a hierarchy, they do the task on bullet basis, this is no exemption of me.\nI'm used to getting the task list and do the coding quick. It gives me more time to think on the code rather than on the\ndomain itself.</p>\n<p>Hence, I got the project with do this, do that, worst is it's just given verbally. Until the project became bulky, there are\nfeatures that the client did'nt want to have in the first place.</p>\n<p><strong>Here's the list of what I did:</strong></p>\n<ul>\n<li>Taking ID picture thru webcam (The client wanted it uploadable instead)</li>\n<li>Fingerprint Scanner (The client doesn't need this)</li>\n<li>API of resident info for the mobile app (I don't know what's this for, I bet the client is not aware on this)</li>\n</ul>\n<p>Now, the most important thing that did'nt addressed on the early stage: <strong>THE ID PRINTER!</strong></p>\n<p>It's hard to test if we don't have a printer. So the company have decided to bought a ID Printer on the last minute before the deadline. I went a lot of test prints,\npvc cards, and overtime work. </p>\n<p>That was the moment I learned that communication is really vital, if I could have ask the manager\nbefore the project start what is the main purpose of the system, what are the pain points of the client, why we are builiding this, not just getting the task list. If I think beyond the code,\nand get the real purpose, I could lessen the development time and ship the core features of the system early. I learned it\nthe hard way. Never neglect communicating, personally I have tend to focus on the code because \"I'm a programmer\", but coding\nis more than just a code, it is way of communicating to other people, yet in terms of code.</p>\n","excerpt":"","description":"Barangay ID system tool for residents management and ID printing.","path":"/tibs/","cover":"https://raw.githubusercontent.com/meowmanijado/meowmanijado.github.io/develop/static/images/posts/TIBS.png","tags":[{"id":"projects","title":"projects","path":"/tag/projects/"},{"id":"laravel","title":"laravel","path":"/tag/laravel/"},{"id":"vue","title":"vue","path":"/tag/vue/"},{"id":"tailwind","title":"tailwind","path":"/tag/tailwind/"}],"author":{"id":"meow","title":"meow","path":"/author/meow/"}}},{"node":{"id":"787ce1e9bd91a0095843420b92cf251e","title":"Plug It","timeToRead":1,"datetime":"2019-06-20 00:00:00","content":"<p>Plug It is a co-working space &#x26; Studio hub for working professionals and university students. </p>\n<p>My friend Chan and ex-colleague has started a business in line of co-working space, he contacted me to\ncreate a system to monitor their daily sales. I'm quite exited about it, this is my first time to create a real-life\nsystem other than ToDo apps, and a successful project built in Laravel.</p>\n<p><strong>Functional Requirements</strong></p>\n<ul>\n<li>Monitor Time In/Out of customers</li>\n<li>Subscriptions (Yearly, Monthly, Weekly)</li>\n<li>Calculate total payment</li>\n<li>Real-time view of current customers</li>\n</ul>\n<p><strong>Challenge</strong></p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">/**</span>\n<span style=\"color: #24292EFF\">* Get the current shift of the office hours.</span>\n<span style=\"color: #24292EFF\">*</span>\n<span style=\"color: #24292EFF\">* Since the office's shift is between two days (12pm - 6am),</span>\n<span style=\"color: #24292EFF\">* we have to use the current time to determine what the shift is.</span>\n<span style=\"color: #24292EFF\">*</span>\n<span style=\"color: #24292EFF\">* @return string</span>\n<span style=\"color: #24292EFF\">*/</span>\n\n<span style=\"color: #24292EFF\">private static function shift()</span>\n<span style=\"color: #24292EFF\">{</span>\n<span style=\"color: #24292EFF\">    $now = now()-&gt;setTime(11, 0, 0);</span>\n\n<span style=\"color: #24292EFF\">    /**</span>\n<span style=\"color: #24292EFF\">        * If the current time is before 12pm, then we'll assume we're</span>\n<span style=\"color: #24292EFF\">        * still supposed to be looking at yesterday's transactions.</span>\n<span style=\"color: #24292EFF\">        */</span>\n<span style=\"color: #24292EFF\">    if (now()-&gt;format('H') &lt; 11) {</span>\n<span style=\"color: #24292EFF\">        $now-&gt;subDays(1);</span>\n<span style=\"color: #24292EFF\">    }</span>\n\n<span style=\"color: #24292EFF\">    return $now-&gt;format('Y-m-d H:i:s');</span>\n<span style=\"color: #24292EFF\">}</span></code></pre>\n<p><strong>Other stuff I Learned</strong></p>\n<p>I have'nt experienced deploying a Laravel app before, gladly the internet is\ngenerous in resources, also, the app needs to be deployed locally but the thing\nis Chan wants to accessed the system anywhere</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">php artisan serve --host 192.168.1.12 --port 80</span></code></pre>\n<p><em>Note: Change the host based on your IP Address</em></p>\n<p>I feel like I have so many stuffs I need to improve, <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">eloquent</code> , <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">queries</code>, better model\nstructure and a lot more, but I'm pretty happy with the result, knowing that they actually using\nit and the client is happy about it.</p>\n<hr>\n","excerpt":"","description":"Coworking System","path":"/plug-it/","cover":"https://raw.githubusercontent.com/meowmanijado/meowmanijado.github.io/develop/static/images/posts/plugit.jpg","tags":[{"id":"projects","title":"projects","path":"/tag/projects/"},{"id":"laravel","title":"laravel","path":"/tag/laravel/"},{"id":"vue","title":"vue","path":"/tag/vue/"},{"id":"tailwind","title":"tailwind","path":"/tag/tailwind/"}],"author":{"id":"meow","title":"meow","path":"/author/meow/"}}}]}},"context":{}}