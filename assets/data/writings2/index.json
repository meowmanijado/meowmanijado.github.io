{"hash":"4e8d6a523acb0a380e682d7db05514b5e86cf0a4","data":{"posts":{"totalCount":14,"pageInfo":{"totalPages":3,"currentPage":1},"edges":[{"node":{"id":"cd7289a963090e372337e5bd227d0898","title":"üìö Thinking Fast and Slow by Daniel Kahneman","timeToRead":1,"datetime":"2020-04-12 00:00:00","content":"\n","excerpt":"","description":"","path":"/thinking-fast-and-slow-by-daniel-kahneman/","cover":"","tags":[{"id":"Books","title":"Books","path":"/tag/Books/"},{"id":"Psychology","title":"Psychology","path":"/tag/Psychology/"},{"id":"Economics","title":"Economics","path":"/tag/Economics/"}],"author":null}},{"node":{"id":"6963c3d5d938fdcc86f1494416e4f647","title":"üìö The Pragmatic Programmer by Andy Hunt and Dave Thomas","timeToRead":1,"datetime":"2020-03-27 00:00:00","content":"<p>What makes a Pragmatic Programmer?</p>\n<p>Easy adopter/fast adapter\nInquisitive - You need to ask questions.\nCritical Thinker\nRealistic\nJack of all trades - You try to be familiar with a broad range of technologies and environments, and you work to keep abreast of new developments.\nTip #1</p>\n<p>Care about your craft.\nTip #2\nThink! About your Work\nKaizen is a Japanese term that captures the concept of continuously making many small improvements.</p>\n<p>Chapter 1: A Pragmatic Philosophy</p>\n<p>It's an attitude, a style, a philosophy of approaching problems and their solutions. They think beyond the immediate probles, always trying to take place it in its larger context, always trying to be aware of the bigger picture.</p>\n<p>The cat ate my source code\nTake responsibly</p>\n<p>Tip #3</p>\n<p>Provide Options, Don't Make Lame Excuses\nSoftware Entropy\nEntropy is a term from physics that refers to the amount of \"disorder\" in a system.</p>\n<p>A broken window.</p>\n<p>One broken window, left unrepaired for any substantial length of time, instills in the inhabitants of the building a sense of abandonment-a sense that the powers that be don't care about the building. So another window gets broken. People start littering. Graffiti appears. Serious structural damage begins. In a relatively short space of time, the building becomes damaged beyond the owners's desire to fix it, and the sense of abandonment becomes reality.\nTip #4</p>\n<p>Don't live with broken windows.\nStone Soup and Boiled Frogs</p>\n","excerpt":"","description":"","path":"/the-pragmatic-programmer-by-andy-hunt-and-dave-thomas/","cover":"","tags":[{"id":"Books","title":"Books","path":"/tag/Books/"},{"id":"Technical Books","title":"Technical Books","path":"/tag/Technical%20Books/"}],"author":null}},{"node":{"id":"fad553a6c600d0928f8806e991c9f7f1","title":"üìö The Five People You Meet in Heaven by Mitch Albom","timeToRead":1,"datetime":"2020-03-15 00:00:00","content":"\n","excerpt":"","description":"","path":"/the-five-people-you-meet-in-heaven-by-mitch-albom/","cover":"","tags":[{"id":"Books","title":"Books","path":"/tag/Books/"}],"author":null}},{"node":{"id":"288b475823f665dbb98935a28a023053","title":"Setting up Laravel with AWS EC2 and RDS","timeToRead":3,"datetime":"2020-03-14 00:00:00","content":"<p><em>Note: This is not an how to ultimate guide, it's my personal documentation how I manage to set this up and for future cheatsheet.</em></p>\n<h2 id=\"prerequisite\"><a href=\"#prerequisite\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Prerequisite</h2>\n<hr>\n<ul>\n<li>Account to AWS Fre Tier</li>\n<li>Laravel Project Repository</li>\n</ul>\n<h2 id=\"aws-ec2\"><a href=\"#aws-ec2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>AWS EC2</h2>\n<hr>\n<ol>\n<li>Create EC2 instance</li>\n<li>Select (Free tier eligible) Ubuntu Server 18.04 LTS (HVM), SSD Volume Type</li>\n<li>Select Next Configure Security Group</li>\n<li>Select Type: HTTP; Port Range 80</li>\n<li>I use key pair for additional security</li>\n</ol>\n<blockquote>\n<p>A key pair consists of a public key that AWS stores, and a private key file that you store. Together, they allow you to connect to your instance securely. For Windows AMIs, the private key file is required to obtain the password used to log into your instance. For Linux AMIs, the private key file allows you to securely SSH into your instance.</p>\n</blockquote>\n<p>--</p>\n<blockquote>\n<p>You have to download the private key file (*.pem file) before you can continue. Store it in a secure and accessible location. You will not be able to download the file again after it's created.</p>\n</blockquote>\n<p>Once the instance already created, you can now access the server using ssh</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">ssh ubuntu@1xx.xx.xx.xxx -i ~/document-path-of-pem-file.pem</code>\n<h2 id=\"installing-nginx\"><a href=\"#installing-nginx\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Installing Nginx</h2>\n<hr>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">sudo apt update\nsudo apt install nginx</code>\n<p>Checking web server</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">systemctl status nginx</code>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">Output</span>\n<span style=\"color: #24292EFF\">‚óè nginx.service - A high performance web server and a reverse proxy server</span>\n<span style=\"color: #24292EFF\">   Loaded: loaded (/lib/systemd/system/nginx.service</span><span style=\"color: #D32F2F\">;</span><span style=\"color: #24292EFF\"> enabled</span><span style=\"color: #D32F2F\">;</span><span style=\"color: #24292EFF\"> vendor preset: enabled)</span>\n<span style=\"color: #24292EFF\">   Active: active (running) since Fri 2018-04-20 16:08:19 UTC</span><span style=\"color: #D32F2F\">;</span><span style=\"color: #24292EFF\"> 3 days ago</span>\n<span style=\"color: #24292EFF\">     Docs: man:nginx(8)</span>\n<span style=\"color: #24292EFF\"> Main PID: 2369 (nginx)</span>\n<span style=\"color: #24292EFF\">    Tasks: 2 (limit: 1153)</span>\n<span style=\"color: #24292EFF\">   CGroup: /system.slice/nginx.service</span>\n<span style=\"color: #24292EFF\">           ‚îú‚îÄ2369 nginx: master process /usr/sbin/nginx -g daemon on</span><span style=\"color: #D32F2F\">;</span><span style=\"color: #24292EFF\"> master_process on</span><span style=\"color: #D32F2F\">;</span>\n<span style=\"color: #24292EFF\">           ‚îî‚îÄ2380 nginx: worker process</span></code></pre>\n<p>Now Nginx appears starterd successfully.</p>\n<p>To check on the browser, call the public IP address that you can get on the instance page, then you can see the Welcome to NGINX!</p>\n<p>For more detailed instruction I followed this tutorial!</p>\n<p><a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-18-04\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-18-04</a></p>\n<p>‚úèÔ∏è <em>Note to self: Write Nginx cheatsheet for my future self!</em></p>\n<h2 id=\"installing-php\"><a href=\"#installing-php\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Installing PHP</h2>\n<hr>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">sudo apt install php-fpm php-mysql</span></code></pre>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">sudo apt install php7.4-mbstring php7.4-xmlrpc php7.4-soap php7.4-gd php7.4-xml php7.4-cli php7.4-zip</span></code></pre>\n<h2 id=\"configure-ssh\"><a href=\"#configure-ssh\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Configure SSH</h2>\n<hr>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">$ ssh-key-gen</span>\n<span style=\"color: #24292EFF\">$ cat </span><span style=\"color: #D32F2F\">~</span><span style=\"color: #24292EFF\">/.ssh/id_rsa.pub</span></code></pre>\n<p>Other resources:\n<a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys-on-ubuntu-1604\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys-on-ubuntu-1604</a></p>\n<p><a href=\"https://help.github.com/en/github/authenticating-to-github/error-permission-denied-publickey\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://help.github.com/en/github/authenticating-to-github/error-permission-denied-publickey</a></p>\n<h2 id=\"installing-composer\"><a href=\"#installing-composer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Installing composer</h2>\n<hr>\n<p><a href=\"https://linuxize.com/post/how-to-install-and-use-composer-on-ubuntu-18-04/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://linuxize.com/post/how-to-install-and-use-composer-on-ubuntu-18-04/</a></p>\n<h2 id=\"configuring-nginx-to-use-the-php-processor\"><a href=\"#configuring-nginx-to-use-the-php-processor\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Configuring Nginx to Use the PHP Processor</h2>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">sudo nano /etc/nginx/sites-available/spartan</span></code></pre>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">server {</span>\n<span style=\"color: #24292EFF\">        listen 80</span><span style=\"color: #D32F2F\">;</span>\n<span style=\"color: #24292EFF\">        root /var/www/html</span><span style=\"color: #D32F2F\">;</span>\n<span style=\"color: #24292EFF\">        index index.php index.html index.htm index.nginx-debian.html</span><span style=\"color: #D32F2F\">;</span>\n<span style=\"color: #24292EFF\">        server_name example.com</span><span style=\"color: #D32F2F\">;</span>\n<span style=\"color: #24292EFF\">‚Äã</span>\n<span style=\"color: #24292EFF\">        location / {</span>\n<span style=\"color: #24292EFF\">                try_files $uri $uri/ =404</span><span style=\"color: #D32F2F\">;</span>\n<span style=\"color: #24292EFF\">        }</span>\n<span style=\"color: #24292EFF\">‚Äã</span>\n<span style=\"color: #24292EFF\">        location </span><span style=\"color: #D32F2F\">~</span><span style=\"color: #24292EFF\"> \\.php$ {</span>\n<span style=\"color: #24292EFF\">                include snippets/fastcgi-php.conf</span><span style=\"color: #D32F2F\">;</span>\n<span style=\"color: #24292EFF\">                fastcgi_pass unix:/var/run/php/php7.2-fpm.sock</span><span style=\"color: #D32F2F\">;</span>\n<span style=\"color: #24292EFF\">        }</span>\n<span style=\"color: #24292EFF\">‚Äã</span>\n<span style=\"color: #24292EFF\">        location </span><span style=\"color: #D32F2F\">~</span><span style=\"color: #24292EFF\"> /\\.ht {</span>\n<span style=\"color: #24292EFF\">                deny all</span><span style=\"color: #D32F2F\">;</span>\n<span style=\"color: #24292EFF\">        }</span>\n<span style=\"color: #24292EFF\">}</span></code></pre>\n<p>Enable your new server block by creating a symbolic link from your new server block configuration file (in the <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">/etc/nginx/sites-available/ directory)</code> to the <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">/etc/nginx/sites-enabled/</code> directory:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">sudo ln -s /etc/nginx/sites-available/spartan /etc/nginx/sites-enabled/</span></code></pre>\n<p>To test your new configuration</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">sudo nginx -t</span></code></pre>\n<p>Reload NGINX to make the necessary changes</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">sudo servince nginx restart</span></code></pre>\n<p>To test in the browser, create PHP file wit phpinfo();</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">sudo nano /var/www/spartan/test.php </span></code></pre>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">&lt;?php</span>\n<span style=\"color: #24292EFF\">‚Äã</span>\n<span style=\"color: #1976D2\">echo</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">phpinfo</span><span style=\"color: #24292EFF\">();</span>\n<span style=\"color: #24292EFF\">‚Äã</span>\n<span style=\"color: #24292EFF\">?&gt;</span></code></pre>\n<p>It should display the PHP info.</p>\n<p>ü§î What is the difference of Mysql and MariaDB?</p>\n<p>Debugging\n<a href=\"https://stackoverflow.com/questions/41147609/unable-to-start-the-mysql-server-in-ubuntu\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://stackoverflow.com/questions/41147609/unable-to-start-the-mysql-server-in-ubuntu</a></p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">apt install php7.4-mysql</span></code></pre>\n<p><a href=\"https://stackoverflow.com/questions/37212945/aws-cant-connect-to-rds-database-from-my-machine\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://stackoverflow.com/questions/37212945/aws-cant-connect-to-rds-database-from-my-machine</a></p>\n<p><a href=\"https://linuxacademy.com/guide/15653-using-aws-rds-with-laravel-october-cms/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://linuxacademy.com/guide/15653-using-aws-rds-with-laravel-october-cms/</a></p>\n","excerpt":"","description":"","path":"/setting-up-laravel-with-aws-e-c2-and-rds/","cover":"","tags":[{"id":"Today I Learned","title":"Today I Learned","path":"/tag/Today%20I%20Learned/"},{"id":"AWS","title":"AWS","path":"/tag/AWS/"},{"id":"RDS","title":"RDS","path":"/tag/RDS/"},{"id":"EC2","title":"EC2","path":"/tag/EC2/"},{"id":"Laravel","title":"Laravel","path":"/tag/Laravel/"}],"author":{"id":"meow","title":"meow","path":"/author/meow/"}}},{"node":{"id":"37faf9e3b7eb1ed17fd6d729486a4985","title":"ü§Ø TIL: Using Proxy to prevent CORS in Nuxt JS","timeToRead":1,"datetime":"2020-02-21 00:00:00","content":"<p>When integrating API to frontend, I always encounter the error No ‚ÄòAccess-Control-Allow-Origin‚Äô header, because of CORS Policy (Content-Resource Sharring Policy) by default browser forbid sharing of content by another domain.</p>\n<p>Normally, I make a request to the backend person to allow access control origin on their side</p>\n<p>Native PHP:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">&lt;?php</span>\n<span style=\"color: #24292EFF\"> </span>\n<span style=\"color: #1976D2\">header</span><span style=\"color: #24292EFF\">(</span><span style=\"color: #22863A\">'Access-Control-Allow-Origin: *'</span><span style=\"color: #24292EFF\">);</span>\n<span style=\"color: #1976D2\">header</span><span style=\"color: #24292EFF\">(</span><span style=\"color: #22863A\">\"Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept\"</span><span style=\"color: #24292EFF\">);</span></code></pre>\n<p>Laravel CORS for Laravel:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">composer require fruitcake/laravel-cors</span></code></pre>\n<p>Fortunately, there is an option to prevent CORS on Nuxt JS</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">nuxt.config.js</span>\n\n<span style=\"color: #24292EFF\">{</span>\n<span style=\"color: #24292EFF\">  modules: [</span>\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #22863A\">'@nuxtjs/axios'</span>\n<span style=\"color: #24292EFF\">  ],</span>\n<span style=\"color: #24292EFF\">‚Äã</span>\n<span style=\"color: #24292EFF\">  axios: {</span>\n<span style=\"color: #24292EFF\">    proxy: </span><span style=\"color: #1976D2\">true</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6A737D\">// Can be also an object with default options</span>\n<span style=\"color: #24292EFF\">  },</span>\n<span style=\"color: #24292EFF\">‚Äã</span>\n<span style=\"color: #24292EFF\">  proxy: {</span>\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #22863A\">'/api/'</span><span style=\"color: #24292EFF\">: </span><span style=\"color: #22863A\">'http://api.example.com'</span><span style=\"color: #24292EFF\">,</span>\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #22863A\">'/api2/'</span><span style=\"color: #24292EFF\">: </span><span style=\"color: #22863A\">'http://api.another-website.com'</span>\n<span style=\"color: #24292EFF\">  }</span>\n<span style=\"color: #24292EFF\">}</span></code></pre>\n<p>With that you don't have to bother the backend person to allow access origin.</p>\n","excerpt":"","description":"","path":"/til-using-proxy-to-prevent-cors-in-nuxt-js/","cover":"","tags":[{"id":"Today I Learned","title":"Today I Learned","path":"/tag/Today%20I%20Learned/"},{"id":"CORS","title":"CORS","path":"/tag/CORS/"},{"id":"Nuxt JS","title":"Nuxt JS","path":"/tag/Nuxt%20JS/"}],"author":null}},{"node":{"id":"5eed392dda578581b097799a9a262838","title":"üî• TIL: Yarn add specific version","timeToRead":1,"datetime":"2020-02-11 00:00:00","content":"<p>I encountered an error today related to tippyjs not registered properly on the Root instance.</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">For recursive components, make sure to provide the &quot;name&quot; option. But name is provided for all components. </code>\n","excerpt":"","description":"","path":"/til-yarn-add-specific-version/","cover":"","tags":[{"id":"Today I Learned","title":"Today I Learned","path":"/tag/Today%20I%20Learned/"}],"author":{"id":"meow","title":"meow","path":"/author/meow/"}}}]}},"context":{}}