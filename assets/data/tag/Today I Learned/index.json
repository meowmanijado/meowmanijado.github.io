{"hash":"4e8d6a523acb0a380e682d7db05514b5e86cf0a4","data":{"tag":{"id":"Today I Learned","title":"Today I Learned","path":"/tag/Today%20I%20Learned/","belongsTo":{"totalCount":7,"pageInfo":{"totalPages":2,"currentPage":1},"edges":[{"node":{"id":"288b475823f665dbb98935a28a023053","title":"Setting up Laravel with AWS EC2 and RDS","datetime":"2020-03-14 00:00:00","path":"/setting-up-laravel-with-aws-e-c2-and-rds/","content":"<p><em>Note: This is not an how to ultimate guide, it's my personal documentation how I manage to set this up and for future cheatsheet.</em></p>\n<h2 id=\"prerequisite\"><a href=\"#prerequisite\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Prerequisite</h2>\n<hr>\n<ul>\n<li>Account to AWS Fre Tier</li>\n<li>Laravel Project Repository</li>\n</ul>\n<h2 id=\"aws-ec2\"><a href=\"#aws-ec2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>AWS EC2</h2>\n<hr>\n<ol>\n<li>Create EC2 instance</li>\n<li>Select (Free tier eligible) Ubuntu Server 18.04 LTS (HVM), SSD Volume Type</li>\n<li>Select Next Configure Security Group</li>\n<li>Select Type: HTTP; Port Range 80</li>\n<li>I use key pair for additional security</li>\n</ol>\n<blockquote>\n<p>A key pair consists of a public key that AWS stores, and a private key file that you store. Together, they allow you to connect to your instance securely. For Windows AMIs, the private key file is required to obtain the password used to log into your instance. For Linux AMIs, the private key file allows you to securely SSH into your instance.</p>\n</blockquote>\n<p>--</p>\n<blockquote>\n<p>You have to download the private key file (*.pem file) before you can continue. Store it in a secure and accessible location. You will not be able to download the file again after it's created.</p>\n</blockquote>\n<p>Once the instance already created, you can now access the server using ssh</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">ssh ubuntu@1xx.xx.xx.xxx -i ~/document-path-of-pem-file.pem</code>\n<h2 id=\"installing-nginx\"><a href=\"#installing-nginx\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Installing Nginx</h2>\n<hr>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">sudo apt update\nsudo apt install nginx</code>\n<p>Checking web server</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">systemctl status nginx</code>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">Output</span>\n<span style=\"color: #24292EFF\">‚óè nginx.service - A high performance web server and a reverse proxy server</span>\n<span style=\"color: #24292EFF\">   Loaded: loaded (/lib/systemd/system/nginx.service</span><span style=\"color: #D32F2F\">;</span><span style=\"color: #24292EFF\"> enabled</span><span style=\"color: #D32F2F\">;</span><span style=\"color: #24292EFF\"> vendor preset: enabled)</span>\n<span style=\"color: #24292EFF\">   Active: active (running) since Fri 2018-04-20 16:08:19 UTC</span><span style=\"color: #D32F2F\">;</span><span style=\"color: #24292EFF\"> 3 days ago</span>\n<span style=\"color: #24292EFF\">     Docs: man:nginx(8)</span>\n<span style=\"color: #24292EFF\"> Main PID: 2369 (nginx)</span>\n<span style=\"color: #24292EFF\">    Tasks: 2 (limit: 1153)</span>\n<span style=\"color: #24292EFF\">   CGroup: /system.slice/nginx.service</span>\n<span style=\"color: #24292EFF\">           ‚îú‚îÄ2369 nginx: master process /usr/sbin/nginx -g daemon on</span><span style=\"color: #D32F2F\">;</span><span style=\"color: #24292EFF\"> master_process on</span><span style=\"color: #D32F2F\">;</span>\n<span style=\"color: #24292EFF\">           ‚îî‚îÄ2380 nginx: worker process</span></code></pre>\n<p>Now Nginx appears starterd successfully.</p>\n<p>To check on the browser, call the public IP address that you can get on the instance page, then you can see the Welcome to NGINX!</p>\n<p>For more detailed instruction I followed this tutorial!</p>\n<p><a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-18-04\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-18-04</a></p>\n<p>‚úèÔ∏è <em>Note to self: Write Nginx cheatsheet for my future self!</em></p>\n<h2 id=\"installing-php\"><a href=\"#installing-php\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Installing PHP</h2>\n<hr>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">sudo apt install php-fpm php-mysql</span></code></pre>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">sudo apt install php7.4-mbstring php7.4-xmlrpc php7.4-soap php7.4-gd php7.4-xml php7.4-cli php7.4-zip</span></code></pre>\n<h2 id=\"configure-ssh\"><a href=\"#configure-ssh\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Configure SSH</h2>\n<hr>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">$ ssh-key-gen</span>\n<span style=\"color: #24292EFF\">$ cat </span><span style=\"color: #D32F2F\">~</span><span style=\"color: #24292EFF\">/.ssh/id_rsa.pub</span></code></pre>\n<p>Other resources:\n<a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys-on-ubuntu-1604\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys-on-ubuntu-1604</a></p>\n<p><a href=\"https://help.github.com/en/github/authenticating-to-github/error-permission-denied-publickey\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://help.github.com/en/github/authenticating-to-github/error-permission-denied-publickey</a></p>\n<h2 id=\"installing-composer\"><a href=\"#installing-composer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Installing composer</h2>\n<hr>\n<p><a href=\"https://linuxize.com/post/how-to-install-and-use-composer-on-ubuntu-18-04/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://linuxize.com/post/how-to-install-and-use-composer-on-ubuntu-18-04/</a></p>\n<h2 id=\"configuring-nginx-to-use-the-php-processor\"><a href=\"#configuring-nginx-to-use-the-php-processor\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Configuring Nginx to Use the PHP Processor</h2>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">sudo nano /etc/nginx/sites-available/spartan</span></code></pre>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">server {</span>\n<span style=\"color: #24292EFF\">        listen 80</span><span style=\"color: #D32F2F\">;</span>\n<span style=\"color: #24292EFF\">        root /var/www/html</span><span style=\"color: #D32F2F\">;</span>\n<span style=\"color: #24292EFF\">        index index.php index.html index.htm index.nginx-debian.html</span><span style=\"color: #D32F2F\">;</span>\n<span style=\"color: #24292EFF\">        server_name example.com</span><span style=\"color: #D32F2F\">;</span>\n<span style=\"color: #24292EFF\">‚Äã</span>\n<span style=\"color: #24292EFF\">        location / {</span>\n<span style=\"color: #24292EFF\">                try_files $uri $uri/ =404</span><span style=\"color: #D32F2F\">;</span>\n<span style=\"color: #24292EFF\">        }</span>\n<span style=\"color: #24292EFF\">‚Äã</span>\n<span style=\"color: #24292EFF\">        location </span><span style=\"color: #D32F2F\">~</span><span style=\"color: #24292EFF\"> \\.php$ {</span>\n<span style=\"color: #24292EFF\">                include snippets/fastcgi-php.conf</span><span style=\"color: #D32F2F\">;</span>\n<span style=\"color: #24292EFF\">                fastcgi_pass unix:/var/run/php/php7.2-fpm.sock</span><span style=\"color: #D32F2F\">;</span>\n<span style=\"color: #24292EFF\">        }</span>\n<span style=\"color: #24292EFF\">‚Äã</span>\n<span style=\"color: #24292EFF\">        location </span><span style=\"color: #D32F2F\">~</span><span style=\"color: #24292EFF\"> /\\.ht {</span>\n<span style=\"color: #24292EFF\">                deny all</span><span style=\"color: #D32F2F\">;</span>\n<span style=\"color: #24292EFF\">        }</span>\n<span style=\"color: #24292EFF\">}</span></code></pre>\n<p>Enable your new server block by creating a symbolic link from your new server block configuration file (in the <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">/etc/nginx/sites-available/ directory)</code> to the <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">/etc/nginx/sites-enabled/</code> directory:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">sudo ln -s /etc/nginx/sites-available/spartan /etc/nginx/sites-enabled/</span></code></pre>\n<p>To test your new configuration</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">sudo nginx -t</span></code></pre>\n<p>Reload NGINX to make the necessary changes</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">sudo servince nginx restart</span></code></pre>\n<p>To test in the browser, create PHP file wit phpinfo();</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">sudo nano /var/www/spartan/test.php </span></code></pre>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">&lt;?php</span>\n<span style=\"color: #24292EFF\">‚Äã</span>\n<span style=\"color: #1976D2\">echo</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">phpinfo</span><span style=\"color: #24292EFF\">();</span>\n<span style=\"color: #24292EFF\">‚Äã</span>\n<span style=\"color: #24292EFF\">?&gt;</span></code></pre>\n<p>It should display the PHP info.</p>\n<p>ü§î What is the difference of Mysql and MariaDB?</p>\n<p>Debugging\n<a href=\"https://stackoverflow.com/questions/41147609/unable-to-start-the-mysql-server-in-ubuntu\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://stackoverflow.com/questions/41147609/unable-to-start-the-mysql-server-in-ubuntu</a></p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">apt install php7.4-mysql</span></code></pre>\n<p><a href=\"https://stackoverflow.com/questions/37212945/aws-cant-connect-to-rds-database-from-my-machine\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://stackoverflow.com/questions/37212945/aws-cant-connect-to-rds-database-from-my-machine</a></p>\n<p><a href=\"https://linuxacademy.com/guide/15653-using-aws-rds-with-laravel-october-cms/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://linuxacademy.com/guide/15653-using-aws-rds-with-laravel-october-cms/</a></p>\n","excerpt":"","description":"","timeToRead":3,"author":{"id":"meow","title":"meow","path":"/author/meow/"}}},{"node":{"id":"37faf9e3b7eb1ed17fd6d729486a4985","title":"ü§Ø TIL: Using Proxy to prevent CORS in Nuxt JS","datetime":"2020-02-21 00:00:00","path":"/til-using-proxy-to-prevent-cors-in-nuxt-js/","content":"<p>When integrating API to frontend, I always encounter the error No ‚ÄòAccess-Control-Allow-Origin‚Äô header, because of CORS Policy (Content-Resource Sharring Policy) by default browser forbid sharing of content by another domain.</p>\n<p>Normally, I make a request to the backend person to allow access control origin on their side</p>\n<p>Native PHP:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">&lt;?php</span>\n<span style=\"color: #24292EFF\"> </span>\n<span style=\"color: #1976D2\">header</span><span style=\"color: #24292EFF\">(</span><span style=\"color: #22863A\">'Access-Control-Allow-Origin: *'</span><span style=\"color: #24292EFF\">);</span>\n<span style=\"color: #1976D2\">header</span><span style=\"color: #24292EFF\">(</span><span style=\"color: #22863A\">\"Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept\"</span><span style=\"color: #24292EFF\">);</span></code></pre>\n<p>Laravel CORS for Laravel:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">composer require fruitcake/laravel-cors</span></code></pre>\n<p>Fortunately, there is an option to prevent CORS on Nuxt JS</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">nuxt.config.js</span>\n\n<span style=\"color: #24292EFF\">{</span>\n<span style=\"color: #24292EFF\">  modules: [</span>\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #22863A\">'@nuxtjs/axios'</span>\n<span style=\"color: #24292EFF\">  ],</span>\n<span style=\"color: #24292EFF\">‚Äã</span>\n<span style=\"color: #24292EFF\">  axios: {</span>\n<span style=\"color: #24292EFF\">    proxy: </span><span style=\"color: #1976D2\">true</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6A737D\">// Can be also an object with default options</span>\n<span style=\"color: #24292EFF\">  },</span>\n<span style=\"color: #24292EFF\">‚Äã</span>\n<span style=\"color: #24292EFF\">  proxy: {</span>\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #22863A\">'/api/'</span><span style=\"color: #24292EFF\">: </span><span style=\"color: #22863A\">'http://api.example.com'</span><span style=\"color: #24292EFF\">,</span>\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #22863A\">'/api2/'</span><span style=\"color: #24292EFF\">: </span><span style=\"color: #22863A\">'http://api.another-website.com'</span>\n<span style=\"color: #24292EFF\">  }</span>\n<span style=\"color: #24292EFF\">}</span></code></pre>\n<p>With that you don't have to bother the backend person to allow access origin.</p>\n","excerpt":"","description":"","timeToRead":1,"author":null}},{"node":{"id":"5eed392dda578581b097799a9a262838","title":"üî• TIL: Yarn add specific version","datetime":"2020-02-11 00:00:00","path":"/til-yarn-add-specific-version/","content":"<p>I encountered an error today related to tippyjs not registered properly on the Root instance.</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">For recursive components, make sure to provide the &quot;name&quot; option. But name is provided for all components. </code>\n","excerpt":"","description":"","timeToRead":1,"author":{"id":"meow","title":"meow","path":"/author/meow/"}}},{"node":{"id":"c91b9e72acfda96f8084f4f65ac310de","title":"üî• TIL: Networking Basics","datetime":"2020-02-10 00:00:00","path":"/til-networking-basics/","content":"<p>I had a conversation with a friend about their architectural structure on his work, and he mentioned the word <strong>websocket</strong>. I believe I have encoutered this word many times and I used it on one of my projects but still I don't have the full grasp idea of what is it doing.</p>\n<p>Reference to <a href=\"https://dev.to/iwilsonq/build-real-time-apps-by-learning-websockets-3c9m\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://dev.to/iwilsonq/build-real-time-apps-by-learning-websockets-3c9m</a></p>\n<p><strong>Socket</strong> - A <strong>TCP (Transmission Control Protocol) Socket</strong> is and endpint instance defined by the combination of IP address with a port, in the context of either a listening state (a server) or a particular TCP Connection (a client, like your browser).</p>\n<p><strong>TCP Connection</strong> - pairing of two sockets.</p>\n<p><strong>3 main kinds of transports commonly use in browser web apps</strong></p>\n<ul>\n<li><strong>XMLHTTPRequests</strong>, or just HTTP for short. Send a single request and get a single response. These are pretty common</li>\n<li><strong>Server-Sent Events</strong>, or SSE. Send a long-lived request and be able to stream data from the server. Great for real-time data streaming, particularly when the client doesn't need to send messages back to the server.</li>\n<li><strong>WebSockets</strong>, the only transport that allows for bidirectional streaming of text and binary data. We'll dive a little further into it.</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ApzTu2NN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/47j90glrwxk8dv2perdp.png\"></p>\n<p>In most tutorials that deal with external data, you'll deal with the left-most paradigm's HTTP requests. Actually, all of these flows are initiated with an HTTP request, as shown by the blue arrows.</p>\n<p>I don't commonly see articles or tutorials on SSE, but MDN has a good reference in case a one-way data stream sounds intriguing.</p>\n<p>The third flow is most interesting to us - it gives us the ability to communicate with the server over a single long-lived connection.</p>\n<p><strong>Use Cases for websockets</strong></p>\n<ol>\n<li>Social feeds</li>\n<li>Multiplayer Games</li>\n<li>Collaborative Editing/Coding</li>\n<li>Multimedia Chat</li>\n</ol>\n","excerpt":"","description":"","timeToRead":1,"author":null}},{"node":{"id":"62e386980b05143e7fac95fa2d49f0de","title":"üî• TIL: Versioning / Cache Busting","datetime":"2020-02-10 00:00:00","path":"/til-versioning-cache-busting/","content":"<p>Normally when I want to see the the changes on my compiled assests, I usually add console.log on JS and change the color of the background on CSS.</p>\n<p>Gladly, I found out that there is method versionon Laravel Mix where it will automatocally append a unique hash to the filenames of all compiled files.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">mix.js('resources/js/app.js', 'public/js')</span>\n<span style=\"color: #24292EFF\">    .version();</span></code></pre>\n<p>Make sure to use the Laravel's gloabal mix function within your views to load the appropriately hashed asset. The mix function will automatically determine the current name of the hashed file:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">&lt;</span><span style=\"color: #22863A\">script</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\">src</span><span style=\"color: #24292EFF\">=</span><span style=\"color: #22863A\">\"{{ mix('/js/app.js') }}\"</span><span style=\"color: #24292EFF\">&gt;&lt;/</span><span style=\"color: #22863A\">script</span><span style=\"color: #24292EFF\">&gt;</span></code></pre>\n<p>See more reference to <a href=\"https://laravel.com/docs/6.x/mix#versioning-and-cache-busting\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://laravel.com/docs/6.x/mix#versioning-and-cache-busting</a></p>\n","excerpt":"","description":"","timeToRead":1,"author":null}},{"node":{"id":"53c4d1cbd109e1f6b5f662f67f87d406","title":"Debugging üõ†","datetime":"2020-02-01 00:00:00","path":"/debugging/","content":"<p>Learnings from Wes Bos Course üòé</p>\n<p>You can select the element stack then go to console and call it using <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">$0</code></p>\n","excerpt":"","description":"","timeToRead":1,"author":{"id":"meow","title":"meow","path":"/author/meow/"}}}]}}},"context":{}}